#!/usr/bin/env node

const ncfx = require('../lib/index');
const minimatch = require("minimatch");

try{
    const options = initParam({
        stopOnErr: true
    });

    if(!ncfx[options.operate]){
        console.error(`${options.order} 命令行'${options.operate}'不存在`);
        process.exit(1);
    }

    ncfx[options.operate](options, getCallback(options.order));
}catch (e){
    console.error(e);
    process.exit(1);
}


function initParam(options) {

    const order = process.argv[1];
    const operate = process.argv[2];
    const args = process.argv.slice(3);
    const _args = [];

    args.forEach(function (arg) {
        if (startsWith(arg, "--")) {
            // 查找并初始化过滤器
            if (!options.filter && (startsWith(arg, "--f=") || startsWith(arg, "--filter="))) {
                let filters = arg.split('=', 2)[1];
                filters = filters.split(",");
                options.filter = function (source) {
                    for (let i = 0; i < filters.length; i++) {
                        if (!minimatch(source, filters[i])) {
                            return false;
                        }
                    }
                    return true;
                }
            }

        } else {
            _args.push(arg);
        }
    });
    options.order = order;
    options.args = _args;
    options.operate = operate;
    return options;
}

function startsWith(str, prefix) {
    return str.substr(0, prefix.length) == prefix;
}

function getCallback(operate) {
    return function _callback(err) {
        if (Array.isArray(err)) {
            console.error(`There were errors during the ${operate}.`);
            err.forEach(function (err) {
                console.error(err.stack || err.message);
            });
            process.exit(1);
        }
        else if (err) {
            console.error('An error has occurred.');
            console.error(err.stack || err.message);
            process.exit(1);
        }
    }
}
